function [t, signal, freq, psd] = linear_chirp_jamming_final_main(A, f0, k, phi, T_total, Fs, f_end)
% 线性扫频干扰信号生成函数
% 输入参数：
%   A       - 信号幅度
%   f0      - 初始频率 (Hz)
%   k       - 调频系数 (Hz/s)
%   phi     - 初始相位 (rad)
%   T       - 信号时长 (s)
%   Fs      - 采样频率 (Hz)
% 输出参数：
%   t       - 时间向量
%   signal  - 时域干扰信号
%   freq    - 功率谱频率轴
%   psd     - 功率谱密度

% 调用示例：
A = 1;               % 信号幅度（通常设为1，可根据需要调整）
f0 = 250;           % 初始频率：10MHz（扫频起点）
f_end = 1750;        % 终止频率：30MHz（扫频范围终点
k = 1.5;            % 调频系数：1e10 Hz/s（即10KHz/μs，决定扫频速度）
phi = 0;             % 初始相位：0弧度（可根据需要调整）
Fs = 16000;           % 采样频率：80MHz（需大于2倍最高频率，满足奈奎斯特准则）
T_total = 1000;         % 总时长：3秒（3个周期）
T_period = (f_end - f0) / k; %一个周期的时间（1e-3）
%按理来说应该有3个锯齿状


% 生成时间向量，时间序列，用于表示信号的时间轴
t = 0:1/Fs:(T_total - 1/Fs);%生成等差数列的语法，格式为起始值:步长:终止值
%保证 “总时长≈T” 的同时，确保采样点数恰好为Fs×T

%计算周期性瞬时频率
    instantaneous_frequency = zeros(size(t));%创建一个t长度相同的全零向量，存储每个时刻的瞬时频率
    for i = 1:length(t)
        % 计算当前时间在周期内的相对时间（取模运算）
        t_relative = mod(t(i), T_period); %计算当前时间 t(i) 相对于 “单个扫频周期 T_period” 的余数
        % 线性扫频公式：f(t) = f0 + k * t_relative
        ft = f0 + k * t_relative; 

        instantaneous_frequency(i) = ft;
    end

% 根据文档中式(1-104)计算线性扫频信号
% j_t = A*exp(1j*(2*pi*f0*t + pi*k*t.^2 + phi)); 是复信号，要从复信号中提取出实部
%phase = 2*pi*f0*t + pi*k*t.^2 + phi;%信号相位随时间的变化规律  
phase = 2*pi * cumsum(instantaneous_frequency) / Fs + phi;
signal = A * real(exp(1i*phase));  % 取实部作为实际信号

% 计算归一化幅度谱
N = length(signal);
window = ones(N, 1)'; 
signal_win = signal .* window;
fft_signal = fft(signal_win, N);

% 生成频率轴（单边谱）
freq = (0:N/2-1)*(Fs/N);

% 计算单边幅度谱
magnitude_spectrum = abs(fft_signal(1:N/2));%注意这里取的是幅度

% 对幅度谱进行归一化处理
normalized_magnitude = magnitude_spectrum / max(magnitude_spectrum);

% 功率谱密度
% psd = abs(fft_signal).^2 / (Fs * sum(window.^2));
% psd_dB = 10*log10(psd);
% psd_dB = psd_dB(1:N/2);

% 绘制时域波形
figure;
plot(t, signal);
xlabel('时间(s)');
ylabel('幅度');
title('线性扫频干扰信号时域波形');
grid on;

% 绘制时间-频率图
figure; 

plot(t, instantaneous_frequency); % 绘制时间-频率关系图
xlabel('时间 (s)');
ylabel('频率 (Hz)');
title('线性扫频干扰信号时间-频率图');
xlim([0, T_total]);  % 限制总时长
ylim([f0,f_end]);  % 限制频率范围
grid on;
new_ticks = f0:300:f_end;
set(gca, 'YTick', new_ticks);

% 绘制归一化幅度谱
figure;
plot(freq, normalized_magnitude);
ylim([0 1]); 
xlabel('频率(Hz)');
ylabel('归一化幅度 |H(f)|');
title('线性扫频干扰信号归一化频谱');
xlim([0, 2000]);
grid on;

% 保存数据
% 数据保存部分
% 创建保存数据的结构体
save_data.t = t;
save_data.signal = signal;
save_data.freq = freq;
%save_data.psd = psd;
save_data.instantaneous_frequency = instantaneous_frequency;
save_data.parameters.A = A;
save_data.parameters.f0 = f0;
save_data.parameters.k = k;
save_data.parameters.phi = phi;
save_data.parameters.T_total = T_total;
save_data.parameters.Fs = Fs;
save_data.parameters.f_end = f_end;

% 生成带时间戳的文件名，确保唯一性
timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
filename = ['chirp_data_', timestamp, '.mat'];

% 生成带时间戳的文件名，确保唯一性
timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
filename = ['chirp_data_', timestamp, '.mat'];

% 获取当前工作目录作为默认保存路径
save_path = pwd;

% 尝试保存文件
try
    % 拼接完整文件路径
    full_path = fullfile(save_path, filename);
    save(full_path,'save_data');
    fprintf('数据已成功保存到文件: %s\n', full_path)
catch ME
    fprintf('数据保存失败，错误信息: %s\n', ME.message)
    % 如果保存失败，尝试在桌面保存（前提是有桌面写入权限）
    desktop_path = 'C:\Users\Public\Desktop'; % 这里是Windows系统的公共桌面路径，可按需修改
    if exist(desktop_path, 'dir')
        fprintf('尝试在桌面保存文件...\n')
        full_path = fullfile(desktop_path, filename);
        try
            save(full_path,'save_data');
            fprintf('数据已成功保存到桌面文件: %s\n', full_path)
        catch ME2
            fprintf('在桌面保存文件也失败，错误信息: %s\n', ME2.message)
        end
    else
        fprintf('桌面路径不存在，无法尝试在桌面保存文件。\n')
    end
end

end
